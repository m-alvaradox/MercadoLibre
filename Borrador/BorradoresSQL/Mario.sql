use mercadolibre;
-- Avance 03

-- MODIFICACIONES
ALTER TABLE orden
MODIFY COLUMN ESTADO ENUM('Pendiente','En curso','Completada') NOT NULL DEFAULT 'Pendiente';

ALTER TABLE publicacion
MODIFY COLUMN ESTADO ENUM('Activa','Agotado') NOT NULL DEFAULT 'Activa';

ALTER TABLE reclamo
MODIFY COLUMN ESTADO ENUM('Abierto','Cerrado') NOT NULL DEFAULT 'Abierto';

ALTER TABLE reclamo
DROP CONSTRAINT fk_clienteid_reclamo;

ALTER TABLE reclamo
MODIFY COLUMN CLIENTEID VARCHAR(50) NOT NULL;

ALTER TABLE reclamo
ADD CONSTRAINT fk_clienteid_reclamo FOREIGN KEY (CLIENTEID) REFERENCES CLIENTE (USERID) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE reclamo
MODIFY COLUMN FECHAINGRESO DATE NOT NULL DEFAULT (CURRENT_DATE);

ALTER TABLE factura
DROP CONSTRAINT fk_idorden_factura;

ALTER TABLE factura
MODIFY COLUMN IDORDEN INT NOT NULL;

ALTER TABLE factura
ADD CONSTRAINT fk_idorden_factura FOREIGN KEY (IDORDEN) REFERENCES ORDEN(ORDERID);

ALTER TABLE factura
MODIFY COLUMN FECHA DATE NOT NULL DEFAULT (CURRENT_DATE);

ALTER TABLE orden
MODIFY FECHACREACION DATE NOT NULL DEFAULT (CURRENT_DATE);

-- ALTER TABLE pago
-- ADD FECHAPAGO DATE NOT NULL DEFAULT (CURRENT_DATE);

ALTER TABLE publicacion
MODIFY COLUMN FECHAPUBLICACION DATE NOT NULL DEFAULT(CURRENT_DATE);

ALTER TABLE visualizacion_publicaciones
MODIFY COLUMN FECHA DATE NOT NULL DEFAULT(CURRENT_DATE);

ALTER TABLE pregunta
MODIFY COLUMN TIEMPOENVIADO DATETIME NOT NULL DEFAULT (CURRENT_TIMESTAMP);

-- TRIGGERS

DELIMITER $$
CREATE TRIGGER IF NOT EXISTS NUEVOCLIENTE
AFTER INSERT ON USUARIO
FOR EACH ROW BEGIN
INSERT INTO CLIENTE VALUES (NEW.USERID);
END $$
DELIMITER $$

DROP TRIGGER IF EXISTS NUEVOVENDEDOR;
DELIMITER $$
CREATE TRIGGER IF NOT EXISTS NUEVOVENDEDOR
BEFORE INSERT ON PUBLICACION
FOR EACH ROW BEGIN
    
    UPDATE USUARIO
    SET ESVENDEDOR = TRUE
    WHERE USERID = NEW.IDVENDEDOR;
    
    INSERT IGNORE INTO VENDEDOR(USERID) VALUES (NEW.IDVENDEDOR);

END $$
DELIMITER $$

DELIMITER $$
CREATE TRIGGER IF NOT EXISTS ACTUALIZAR_ESTADO_PUBLICACION
BEFORE UPDATE ON PUBLICACION
FOR EACH ROW BEGIN

	IF NEW.STOCK >0 THEN
		SET NEW.estado = 'Activa';
	else
		SET new.estado = 'Agotado';
    END IF;

END $$
DELIMITER $$

DROP TRIGGER IF EXISTS GENERARORDEN;

DELIMITER $$
CREATE TRIGGER IF NOT EXISTS GENERARORDEN
AFTER INSERT ON ORDEN
FOR EACH ROW BEGIN
UPDATE PUBLICACION
SET STOCK = STOCK - NEW.CANTIDADPRODUCTO
WHERE NOPUBLICACION = NEW.IDPUBLICACION;

UPDATE CUPON
SET VECES = VECES - 1
WHERE ID = NEW.IDCUPON;

UPDATE VENDEDOR
SET REPUTACION = ROUND((SELECT AVG(ESTRELLASVENDEDOR) AS PROMEDIO FROM ORDEN WHERE IDVENDEDOR = new.IDVENDEDOR),2)
WHERE USERID = new.IDVENDEDOR;

END $$
DELIMITER $$

DROP TRIGGER IF EXISTS ACTUALIZARREPUTACION;

DELIMITER $$
CREATE TRIGGER IF NOT EXISTS ACTUALIZARREPUTACION
AFTER UPDATE ON ORDEN
FOR EACH ROW BEGIN
UPDATE VENDEDOR
SET REPUTACION = ROUND((SELECT AVG(ESTRELLASVENDEDOR) AS PROMEDIO FROM ORDEN WHERE IDVENDEDOR = new.IDVENDEDOR),2)
WHERE USERID = new.IDVENDEDOR;
END $$
DELIMITER $$

-- STORED PROCEDURES
DROP PROCEDURE IF EXISTS ACTUALIZARSTOCK;

DELIMITER $$
CREATE PROCEDURE IF NOT EXISTS CREARCUENTA (IN USUARIO VARCHAR(50), IN PASS VARCHAR(50), 
IN NOMBRE VARCHAR(10), IN APELLIDO VARCHAR(10), IN FECHANACIMIENTO DATE, IN EMAIL VARCHAR(50), IN TELEFONO VARCHAR(10), IN GENERO ENUM ('Masculino', 'Femenino', 'LGBT'))
BEGIN

    DECLARE v_id_usuario INT;
    DECLARE v_numero_filas INT;

    START TRANSACTION;

    -- Inserto los datos

    INSERT INTO USUARIO (USERID,PASS,NOMBRE,APELLIDO,FECHANACIMIENTO, EMAIL,TELEFONO,GENERO) VALUES
    (USUARIO, PASS, NOMBRE, APELLIDO, FECHANACIMIENTO, EMAIL, TELEFONO, GENERO);

    SET v_id_usuario = LAST_INSERT_ID();

    -- Obtener el número de filas afectadas
    SELECT ROW_COUNT() INTO v_numero_filas;

    -- Comprobar si se insertó al menos una fila
    IF v_numero_filas = 1 THEN
        -- Éxito: confirmar la transacción
        COMMIT;
        SELECT CONCAT('Inserción exitosa. ID de usuario: ', v_id_usuario) AS mensaje;
    ELSE
        -- Error: deshacer la transacción
        ROLLBACK;
        SELECT 'Error al insertar datos. Transacción deshecha.' AS mensaje;
    END IF;
END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS `REALIZARCOMPRA`;
DELIMITER $$
CREATE PROCEDURE IF NOT EXISTS REALIZARCOMPRA (IN IDCUPON INT, IN PRODUCTID INT, IN IDPAGO INT,
IN CANTIDADPRODUCTO INT, IN IDPUBLICACION INT, IN IDCLIENTE VARCHAR(50), IN IDVENDEDOR VARCHAR(50),
IN IMPORTE FLOAT, IN IDDIRECCION INT, IN COSTOENVIO FLOAT, IN FECHAENTREGA DATE)
BEGIN

    DECLARE v_id_orden INT;
    DECLARE v_numero_filas INT;

    START TRANSACTION;

    -- Inserto los datos

    INSERT INTO ORDEN (IDCUPON, PRODUCTID, IDPAGO, CANTIDADPRODUCTO, IDPUBLICACION, IDCLIENTE, IDVENDEDOR,
    IMPORTE, IDDIRECCION, COSTOENVIO, FECHAENTREGA) VALUES
    (IDCUPON, PRODUCTID, IDPAGO, CANTIDADPRODUCTO, IDPUBLICACION, IDCLIENTE, IDVENDEDOR,
    IMPORTE, IDDIRECCION, COSTOENVIO, FECHAENTREGA);

    SET v_id_orden = LAST_INSERT_ID();

    -- Obtener el número de filas afectadas
    SELECT ROW_COUNT() INTO v_numero_filas;

    -- Comprobar si se insertó al menos una fila
    IF v_numero_filas = 1 THEN
        -- Éxito: confirmar la transacción
        COMMIT;
        SELECT CONCAT('Inserción exitosa. ID de Orden: ', v_id_orden) AS mensaje;
    ELSE
        -- Error: deshacer la transacción
        ROLLBACK;
        SELECT 'Error al insertar datos. Transacción deshecha.' AS mensaje;
    END IF;
END $$
DELIMITER ;

drop Procedure if EXISTS `CALIFICARCOMPRA`;
DELIMITER $$
CREATE PROCEDURE IF NOT EXISTS CALIFICARCOMPRA (IN NEW_ESTRELLASPRODUCTO INT, IN NEW_ESTRELLASVENDEDOR INT, IN NEW_COMENTARIO VARCHAR(100), IN IDORDEN INT)
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		SELECT 'ERROR';
        ROLLBACK;
	END;

    START TRANSACTION;

    UPDATE ORDEN
    SET ESTRELLASPRODUCTO = NEW_ESTRELLASPRODUCTO,
    ESTRELLASVENDEDOR = NEW_ESTRELLASVENDEDOR,
    COMENTARIO = NEW_COMENTARIO
    WHERE ORDERID = IDORDEN;
    SELECT 'OK';
    COMMIT; 

END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE IF NOT EXISTS NUEVADIRECCION (IN PARROQUIA VARCHAR(50), IN REFERENCIAS VARCHAR(200),
IN IDCIUDAD INT, IN USERID VARCHAR(50))
BEGIN

    DECLARE v_id_direccion INT;
    DECLARE v_numero_filas INT;

    START TRANSACTION;

    -- Inserto los datos

    INSERT INTO DIRECCION (PARROQUIA, REFERENCIAS, IDCIUDAD, USERID) VALUES
    (PARROQUIA, REFERENCIAS, IDCIUDAD, USERID);

    SET v_id_direccion = LAST_INSERT_ID();

    -- Obtener el número de filas afectadas
    SELECT ROW_COUNT() INTO v_numero_filas;

    -- Comprobar si se insertó al menos una fila
    IF v_numero_filas = 1 THEN
        -- Éxito: confirmar la transacción
        COMMIT;
        SELECT CONCAT('Inserción exitosa. Direccion: ', v_id_direccion) AS mensaje;
    ELSE
        -- Error: deshacer la transacción
        ROLLBACK;
        SELECT 'Error al insertar datos. Transacción deshecha.' AS mensaje;
    END IF;
END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS `ELIMINARDIRECCION`;
DELIMITER $$
CREATE PROCEDURE IF NOT EXISTS ELIMINARDIRECCION (IN DIRECCION_ID INT)
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		SELECT 'ERROR';
        ROLLBACK;
	END;

    START TRANSACTION;

    DELETE FROM DIRECCION
    WHERE ID = DIRECCION_ID;

    SELECT 'OK';
    COMMIT; 

END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS NUEVORECLAMO;

DELIMITER $$
CREATE PROCEDURE IF NOT EXISTS NUEVORECLAMO (IN TIPO VARCHAR(20),
IN CLIENTEID VARCHAR(50), IN VENDEDORID VARCHAR(50), IN ORDERID INT)
BEGIN

    DECLARE v_id_reclamo INT;
    DECLARE v_numero_filas INT;

    START TRANSACTION;

    -- Inserto los datos

    INSERT INTO RECLAMO (TIPO, CLIENTEID, VENDEDORID, ORDERID) VALUES
    (TIPO, CLIENTEID, VENDEDORID, ORDERID);

    SET v_id_reclamo = LAST_INSERT_ID();

    -- Obtener el número de filas afectadas
    SELECT ROW_COUNT() INTO v_numero_filas;

    -- Comprobar si se insertó al menos una fila
    IF v_numero_filas = 1 THEN
        -- Éxito: confirmar la transacción
        COMMIT;
        SELECT CONCAT('Inserción exitosa. Reclamo: ', v_id_reclamo) AS mensaje;
    ELSE
        -- Error: deshacer la transacción
        ROLLBACK;
        SELECT 'Error al insertar datos. Transacción deshecha.' AS mensaje;
    END IF;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE IF NOT EXISTS EMITIRFACTURA (IN DESCRIPCION VARCHAR(100), IN IDVENDEDOR VARCHAR(50), 
IN IDCLIENTE VARCHAR(50), IN IDORDEN INT)
BEGIN

    DECLARE v_id_factura INT;
    DECLARE v_numero_filas INT;

    START TRANSACTION;

    -- Inserto los datos

    INSERT INTO FACTURA (DESCRIPCION, IDVENDEDOR, IDCLIENTE, IDORDEN) VALUES
    (DESCRIPCION, IDVENDEDOR, IDCLIENTE, IDORDEN);

    SET v_id_factura = LAST_INSERT_ID();

    -- Obtener el número de filas afectadas
    SELECT ROW_COUNT() INTO v_numero_filas;

    -- Comprobar si se insertó al menos una fila
    IF v_numero_filas = 1 THEN
        -- Éxito: confirmar la transacción
        COMMIT;
        SELECT CONCAT('Inserción exitosa. Factura: ', v_id_factura) AS mensaje;
    ELSE
        -- Error: deshacer la transacción
        ROLLBACK;
        SELECT 'Error al insertar datos. Transacción deshecha.' AS mensaje;
    END IF;
END $$
DELIMITER ;

-- OTROS PROCEDURES (No estan implementados en la APP)
DELIMITER $$
CREATE PROCEDURE IF NOT EXISTS CAMBIAR_ESTADO_RECLAMO (IN RECLAMO_ID INT, IN NUEVO_ESTADO ENUM ('Abierto','Cerrado'))
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		SELECT 'ERROR';
        ROLLBACK;
	END;

    START TRANSACTION;

    UPDATE RECLAMO
    SET ESTADO = NUEVO_ESTADO
    WHERE RECLAMO.ID = RECLAMO_ID;
    
    SELECT 'OK';
    COMMIT; 

END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE IF NOT EXISTS CAMBIAR_TIPO_PUBLICACION (IN PUBLICACION_ID INT, IN NUEVO_TIPO ENUM ('Gratuita','Clásica','Premium'))
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		SELECT 'ERROR';
        ROLLBACK;
	END;

    START TRANSACTION;

    UPDATE PUBLICACION
    SET TIPOEXPOSICION = NUEVO_TIPO
    WHERE NOPUBLICACION = PUBLICACION_ID;
    SELECT 'OK';
    COMMIT; 

END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE IF NOT EXISTS CAMBIAR_ESTADO_ORDEN (IN ORDEN_ID INT, IN NUEVO_ESTADO ENUM ('Pendiente','En Curso','Completada'))
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		SELECT 'ERROR';
        ROLLBACK;
	END;

    START TRANSACTION;

    UPDATE ORDEN
    SET ESTADO = NUEVO_ESTADO
    WHERE ORDERID = ORDEN_ID;
    SELECT 'OK';
    COMMIT; 

END $$
DELIMITER ;

#Para llamar los SP
-- CALL CAMBIAR_ESTADO_RECLAMO();
-- CALL  CAMBIAR_TIPO_PUBLICACION();
-- CALL CAMBIAR_ESTADO_ORDEN();

-- VISTAS
CREATE VIEW generousuarios AS
SELECT genero,
    CONCAT(ROUND((COUNT(*) * 100.0 / (SELECT COUNT(*) FROM usuario)), 0), '%') as porcentaje
FROM usuario
GROUP BY genero;

-- INDICES
use mercadolibre;
ALTER TABLE PRODUCTO
ADD INDEX idx_marca (marca);

# Agregue este indice porque las personas queremos identificar un producto directamente por la marca, por lo que ahorrariamos buscar
# en todas las filas la marca cuando podemos establecer este indice que nos lleve directo
# haciendo mas eficaz el tiempo de ejecucion del query